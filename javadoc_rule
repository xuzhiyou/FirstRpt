1、在javadoc中的语法可理解为html下的简单转变，具有统一的格式。

2、在javadoc中，注释性语言不会自动换行，即在java类文件中书写中的换行在最后形成的文档中不会换行，可以使用<br>进行换行。

3、对于标记 @ ，在注释时应重启一行开始写，否则它会默认为上一标记的一部分。并且在同一标记下，同理。(此处重启一行不用加<br>)。

		java中注释					文档显示
	   * @param name String类型，姓名            name - String类型，姓名 查看: @see getName()  (其中getName()为非超链接，下面会解释)
	   * 查看: @see #getName()


4、{ @ }标记类型是相当于在注释文本中使用，不作为文档中的单独一种类型展示。
  
5、注释中的多余空格均作为一个空格展示。

6、对于一个 @ 语句 其后面的所有数据均可能作为其一个参数，直达遇到下一个 @ 或到达结尾，但{ @ }不算。
   例：
		java中注释						    文档显示
	* @see #getName() getName code <br>				getName code 
	        test{ @code List<String>} list			      test{ @code List} list
	    

8、{ @link } 与 { @linkplain }方法基本相似，与 @see 方法类似，即后面都跟可参考的类或类内方法。
    区别： @link 显示为code font； @linkplain 显示为文本字体格式； 
    @see 为单独元素展示，不能应用在，而前两者在文本中使用。


9、{ @inheritDoc }: 继承父类相对应方法的文档注释。在本类方法前注释中使用，但前提是此类覆盖父类中的方法，否则warning。
    此时，本类方法前的注释不起作用，只显示父类中的方法注释。????

10、文档注释分为三部分。第一部分是简述，即列表中属性名或者方法名后面那段说明就是简述；第二部分是详细说明部分，
   该部分对属性或者方法进行详细的说明，可以包含若干个点号；第三部分是特殊说明部分，这部分包括版本说明、参数说明、返回值说明等。
   对于第一第二部分，以 点号(.) 为分界点，即.之前为第一部分，其余除了第三部分的说明外其余全部为第二部分，即对变量或方法的详细说明。

  
11、 @cide 与 @literal 作用相似，都是用来将 { @code A<B>C} 在文档中展示为 A<B>C。
    区别： @cide 显示为code font，即代码字体格式；而 @literal 显示为文本字体格式。 但在<code></code>中两者一样显示。因此，规范状态应两者分开写。
    <code></code>用于在html中显示代码，<pre></pre>用来固定换行空格等样式，对于<>等字符若已用 @code或literal，<code></code>可不用，反之不可以。
              对于  @code 若用在<code></code>中会提示警告。
    html中特殊字符可使用 @literal 原样展示，比如：&#10 等，否则会出错。

12、 @see  另外参见，链接形式，用法： @see package.class#member label。一般方法要加上参数类型。
     可以只到class，label只是在文档显示的形式，缺省状态下显示具体方法或类。
     例：         
		java中注释					文档显示
	* @see #getName()					getName()
	* @see #getName() getName				getName
	* @see #getName() getName  前面				getName  前面
	* @see  xzy.HighArray					HighArray
	* @see  xzy.HighArray#insert(long)			HighArray.insert(long)

12、针对 @see ，想参见java Api中的类或方法时，其文档是以文本形式展示，不是超链接：
   例：
	    * @see String                                     String
	    * @see String#equals			String.equals(java.lang.Object)
	    * @see String#equals(Object)		String.equals(Object)
	    * @see String#equals(Object) bbb			bbb


13、标记 @ 在文本中无法正常使用，只是作为上一标记的参数或普通文本展示(3)。{ @ }在文本中使用，但作为标记 @ 下的参数时不起本身作用，只为普通文本(4)。

14、对于修饰符 synchronized 与 native 在文档中不显示，即含有这两个修饰符的方法在文档中的此方法修饰符中吧不显示。
    例：
     public native static double getPassword();			public static double getPassword();





